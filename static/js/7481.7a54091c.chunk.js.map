{"version":3,"file":"static/js/7481.7a54091c.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/icons-material/ExpandMore.js","../../../node_modules/@mui/material/esm/AccordionDetails/AccordionDetails.js","../../../node_modules/@mui/material/esm/AccordionDetails/accordionDetailsClasses.js","../../../node_modules/@mui/material/esm/AccordionSummary/accordionSummaryClasses.js","../../../node_modules/@mui/material/esm/AccordionSummary/AccordionSummary.js","../../../node_modules/src/observe.ts","../../../node_modules/src/InView.tsx","../../../node_modules/src/useInView.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getAccordionDetailsUtilityClass } from './accordionDetailsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getAccordionDetailsUtilityClass, classes);\n};\n\nconst AccordionDetailsRoot = styled('div', {\n  name: 'MuiAccordionDetails',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2, 2)\n}));\nconst AccordionDetails = /*#__PURE__*/React.forwardRef(function AccordionDetails(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAccordionDetails'\n  });\n\n  const {\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(AccordionDetailsRoot, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionDetails.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default AccordionDetails;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAccordionDetailsUtilityClass(slot) {\n  return generateUtilityClass('MuiAccordionDetails', slot);\n}\nconst accordionDetailsClasses = generateUtilityClasses('MuiAccordionDetails', ['root']);\nexport default accordionDetailsClasses;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAccordionSummaryUtilityClass(slot) {\n  return generateUtilityClass('MuiAccordionSummary', slot);\n}\nconst accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);\nexport default accordionSummaryClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"expandIcon\", \"focusVisibleClassName\", \"onClick\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ButtonBase from '../ButtonBase';\nimport AccordionContext from '../Accordion/AccordionContext';\nimport accordionSummaryClasses, { getAccordionSummaryUtilityClass } from './accordionSummaryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    expanded,\n    disabled,\n    disableGutters\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],\n    focusVisible: ['focusVisible'],\n    content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],\n    expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']\n  };\n  return composeClasses(slots, getAccordionSummaryUtilityClass, classes);\n};\n\nconst AccordionSummaryRoot = styled(ButtonBase, {\n  name: 'MuiAccordionSummary',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme,\n  ownerState\n}) => {\n  const transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return _extends({\n    display: 'flex',\n    minHeight: 48,\n    padding: theme.spacing(0, 2),\n    transition: theme.transitions.create(['min-height', 'background-color'], transition),\n    [`&.${accordionSummaryClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    [`&.${accordionSummaryClasses.disabled}`]: {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity\n    },\n    [`&:hover:not(.${accordionSummaryClasses.disabled})`]: {\n      cursor: 'pointer'\n    }\n  }, !ownerState.disableGutters && {\n    [`&.${accordionSummaryClasses.expanded}`]: {\n      minHeight: 64\n    }\n  });\n});\nconst AccordionSummaryContent = styled('div', {\n  name: 'MuiAccordionSummary',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexGrow: 1,\n  margin: '12px 0'\n}, !ownerState.disableGutters && {\n  transition: theme.transitions.create(['margin'], {\n    duration: theme.transitions.duration.shortest\n  }),\n  [`&.${accordionSummaryClasses.expanded}`]: {\n    margin: '20px 0'\n  }\n}));\nconst AccordionSummaryExpandIconWrapper = styled('div', {\n  name: 'MuiAccordionSummary',\n  slot: 'ExpandIconWrapper',\n  overridesResolver: (props, styles) => styles.expandIconWrapper\n})(({\n  theme\n}) => ({\n  display: 'flex',\n  color: (theme.vars || theme).palette.action.active,\n  transform: 'rotate(0deg)',\n  transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest\n  }),\n  [`&.${accordionSummaryClasses.expanded}`]: {\n    transform: 'rotate(180deg)'\n  }\n}));\nconst AccordionSummary = /*#__PURE__*/React.forwardRef(function AccordionSummary(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAccordionSummary'\n  });\n\n  const {\n    children,\n    className,\n    expandIcon,\n    focusVisibleClassName,\n    onClick\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    disabled = false,\n    disableGutters,\n    expanded,\n    toggle\n  } = React.useContext(AccordionContext);\n\n  const handleChange = event => {\n    if (toggle) {\n      toggle(event);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const ownerState = _extends({}, props, {\n    expanded,\n    disabled,\n    disableGutters\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AccordionSummaryRoot, _extends({\n    focusRipple: false,\n    disableRipple: true,\n    disabled: disabled,\n    component: \"div\",\n    \"aria-expanded\": expanded,\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    onClick: handleChange,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [/*#__PURE__*/_jsx(AccordionSummaryContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: children\n    }), expandIcon && /*#__PURE__*/_jsx(AccordionSummaryExpandIconWrapper, {\n      className: classes.expandIconWrapper,\n      ownerState: ownerState,\n      children: expandIcon\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionSummary.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default AccordionSummary;","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","_excluded","AccordionDetailsRoot","styled","name","slot","overridesResolver","props","styles","root","padding","theme","spacing","AccordionDetails","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getAccordionDetailsUtilityClass","useUtilityClasses","_jsx","_extends","clsx","generateUtilityClass","accordionDetailsClasses","generateUtilityClasses","getAccordionSummaryUtilityClass","AccordionSummaryRoot","ButtonBase","transition","duration","transitions","shortest","display","minHeight","create","accordionSummaryClasses","backgroundColor","vars","palette","action","focus","opacity","disabledOpacity","cursor","disableGutters","AccordionSummaryContent","content","flexGrow","margin","AccordionSummaryExpandIconWrapper","expandIconWrapper","color","active","transform","children","expandIcon","focusVisibleClassName","onClick","AccordionContext","disabled","expanded","toggle","slots","focusVisible","_jsxs","focusRipple","disableRipple","component","event","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","length","delete","unobserve","size","disconnect","isPlainChildren","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","state","setState","current","entryTarget","result"],"sourceRoot":""}