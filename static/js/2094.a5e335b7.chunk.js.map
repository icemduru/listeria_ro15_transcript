{"version":3,"file":"static/js/2094.a5e335b7.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/BigWigAdapter/BigWigAdapter.ts"],"sourcesContent":["import { BigWig } from '@gmod/bbi'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { updateStatus, Feature } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { rectifyStats, UnrectifiedFeatureStats } from '@jbrowse/core/util/stats'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nexport default class BigWigAdapter extends BaseFeatureDataAdapter {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private setupP?: Promise<{ bigwig: BigWig; header: any }>\n\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const bigwig = new BigWig({\n      filehandle: openLocation(\n        this.getConf('bigWigLocation'),\n        this.pluginManager,\n      ),\n    })\n    const header = await updateStatus(\n      'Downloading bigwig header',\n      statusCallback,\n      () => bigwig.getHeader(opts),\n    )\n    return { bigwig, header }\n  }\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const {\n      header: { refsByName },\n    } = await this.setup(opts)\n    return Object.keys(refsByName)\n  }\n\n  public async refIdToName(refId: number) {\n    const {\n      header: { refsByNumber },\n    } = await this.setup()\n    return refsByNumber[refId]?.name\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const {\n      header: { totalSummary },\n    } = await this.setup(opts)\n    return rectifyStats(totalSummary as UnrectifiedFeatureStats)\n  }\n\n  public getFeatures(region: Region, opts: WiggleOptions = {}) {\n    const { refName, start, end } = region\n    const {\n      bpPerPx = 0,\n      signal,\n      resolution = 1,\n      statusCallback = () => {},\n    } = opts\n    return ObservableCreate<Feature>(async observer => {\n      statusCallback('Downloading bigwig data')\n      const source = this.getConf('source')\n      const { bigwig } = await this.setup(opts)\n      const feats = await bigwig.getFeatures(refName, start, end, {\n        ...opts,\n        basesPerSpan: bpPerPx / resolution,\n      })\n\n      for (let i = 0; i < feats.length; i++) {\n        const data = feats[i]\n        if (source) {\n          // @ts-ignore\n          data.source = source\n        }\n        const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`\n        // @ts-ignore\n        data.refName = refName\n        data.uniqueId = uniqueId\n        observer.next({\n          // @ts-ignore\n          get: (str: string) => (data as Record<string, unknown>)[str],\n          id: () => uniqueId,\n          // @ts-ignore\n          toJSON: () => data,\n        })\n      }\n      observer.complete()\n    }, signal)\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async estimateRegionsStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["BigWigAdapter","setupP","opts","statusCallback","bigwig","BigWig","filehandle","openLocation","this","getConf","pluginManager","updateStatus","getHeader","header","setupPre","catch","e","undefined","setup","refsByName","Object","keys","refId","refsByNumber","name","totalSummary","rectifyStats","region","refName","start","end","bpPerPx","signal","resolution","ObservableCreate","observer","source","getFeatures","basesPerSpan","feats","i","data","uniqueId","next","get","str","id","toJSON","length","complete","_regions","featureDensity","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}