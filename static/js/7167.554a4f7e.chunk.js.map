{"version":3,"file":"static/js/7167.554a4f7e.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiWiggleAdapter/MultiWiggleAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { AugmentedRegion as Region } from '@jbrowse/core/util/types'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { SimpleFeature, Feature } from '@jbrowse/core/util'\nimport { merge } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nfunction getFilename(uri: string) {\n  const filename = uri.slice(uri.lastIndexOf('/') + 1)\n  return filename.slice(0, filename.lastIndexOf('.'))\n}\n\ninterface AdapterEntry {\n  dataAdapter: BaseFeatureDataAdapter\n  [key: string]: unknown\n}\n\nexport default class MultiWiggleAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  public async getAdapters(): Promise<AdapterEntry[]> {\n    const getSubAdapter = this.getSubAdapter\n    if (!getSubAdapter) {\n      throw new Error('no getSubAdapter available')\n    }\n    let subConfs = this.getConf('subadapters')\n    if (!subConfs?.length) {\n      const entries = this.getConf('bigWigs') as string[]\n      subConfs = entries.map(entry => ({\n        type: 'BigWigAdapter',\n        source: getFilename(entry),\n        bigWigLocation: {\n          uri: entry,\n        },\n      }))\n    }\n\n    return Promise.all(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      subConfs.map(async (conf: any) => {\n        const dataAdapter = (await getSubAdapter(conf))\n          .dataAdapter as BaseFeatureDataAdapter\n        return {\n          source: conf.name || dataAdapter.id,\n          ...conf,\n          dataAdapter,\n        }\n      }),\n    )\n  }\n\n  // note: can't really have dis-agreeing refNames\n  public async getRefNames(opts?: BaseOptions) {\n    const adapters = await this.getAdapters()\n    const allNames = await Promise.all(\n      adapters.map(a => a.dataAdapter.getRefNames(opts)),\n    )\n    return [...new Set(allNames.flat())]\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const adapters = await this.getAdapters()\n    const stats = (\n      await Promise.all(\n        // @ts-ignore\n        adapters.map(adp => adp.dataAdapter.getGlobalStats?.(opts)),\n      )\n    ).filter(f => !!f)\n    const scoreMin = Math.min(...stats.map(s => s.scoreMin))\n    const scoreMax = Math.max(...stats.map(s => s.scoreMax))\n    return { scoreMin, scoreMax }\n  }\n\n  public getFeatures(region: Region, opts: WiggleOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const adapters = await this.getAdapters()\n      merge(\n        ...adapters.map(adp =>\n          adp.dataAdapter.getFeatures(region, opts).pipe(\n            map(p =>\n              // add source field if it does not exist\n              p.get('source')\n                ? p\n                : new SimpleFeature({\n                    ...p.toJSON(),\n                    uniqueId: adp.source + '-' + p.id(),\n                    source: adp.source,\n                  }),\n            ),\n          ),\n        ),\n      ).subscribe(observer)\n    }, opts.signal)\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async estimateRegionsStats(_regions: Region[]) {\n    return { featureDensity: 0 }\n  }\n\n  // in another adapter type, this could be dynamic depending on region or\n  // something, but it is static for this particular multi-wiggle adapter type\n  async getSources() {\n    const adapters = await this.getAdapters()\n    return adapters.map(({ dataAdapter, source, name, ...rest }) => ({\n      name: source,\n      __name: name,\n      ...rest,\n    }))\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["getFilename","uri","filename","slice","lastIndexOf","MultiWiggleAdapter","getSubAdapter","this","Error","subConfs","getConf","length","entries","map","entry","type","source","bigWigLocation","Promise","all","conf","dataAdapter","name","id","opts","getAdapters","adapters","a","getRefNames","allNames","Set","flat","adp","getGlobalStats","stats","filter","f","scoreMin","Math","min","s","scoreMax","max","region","ObservableCreate","observer","merge","getFeatures","pipe","p","get","SimpleFeature","toJSON","uniqueId","subscribe","signal","_regions","featureDensity","rest","__name","BaseFeatureDataAdapter","capabilities"],"sourceRoot":""}